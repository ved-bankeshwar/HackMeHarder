

insecure_deserialization_rules:
  - id: "insecure-pickle-load"
    pattern: "pickle.load"
    description: "Deserializing data with pickle.load is insecure. Unpickling data from an untrusted source can execute arbitrary code."
    severity: "Critical"
    remediation: "Avoid using pickle with untrusted data. Use a safer serialization format like JSON if possible."

  - id: "insecure-pickle-loads"
    pattern: "pickle.loads"
    description: "Deserializing data with pickle.loads is insecure. Unpickling data from an untrusted source can execute arbitrary code."
    severity: "Critical"
    remediation: "Avoid using pickle with untrusted data. Use a safer serialization format like JSON if possible."

  - id: "insecure-shelve"
    pattern: "shelve.open"
    description: "The shelve module uses pickle internally, making it unsafe to use with untrusted file sources."
    severity: "High"
    remediation: "Do not use shelve with data from untrusted sources. Consider using a database or a safer file format."

  - id: "insecure-yaml-load"
    pattern: "yaml.load"
    description: "The default yaml.load() can execute arbitrary Python code. It is unsafe to use with any untrusted data."
    severity: "High"
    remediation: "Always use yaml.safe_load() to parse YAML data from untrusted sources. It can only parse a subset of the YAML language."
  
  - id: PY-CMD-INJ-001
    name: "Command Injection: Subprocess with shell=True"
    type: "Command Injection"
    detection:
    node_type: "Call"
    function_is_attribute: True
    function_call_properties:
      object_name: "subprocess"

      keyword_argument:
        name: "shell"
        value: True

  - id: PY-CMD-INJ-002
    name: "Command Injection: os.system call"
    type: "Command Injection"
    detection:
      node_type: "Call"
      function_is_attribute: True
      function_call_properties:
        object_name: "os"
        function_name: "system"

  - id: PY-SQLI-001
    name: "SQL Injection: Unsafe string in execute"
    type: "SQL Injection"
    detection:
        node_type: "Call"
        function_is_attribute: True
        function_call_properties:
          function_name: "execute"
        argument_properties:
          - position: 0
            is_formatted_string: True

xss_rules:
  # 'Sources' are functions/objects that provide user-controllable input.
  sources:
    - "request.args"
    - "request.form"
    - "request.values"
    - "request.data"
    - "request.json"

  # 'Sinks' are dangerous functions where tainted data should not go.
  # For Flask, this includes functions that render raw HTML.
  sinks:
    - "render_template_string"
    - "Markup"